1. Create a database for the model we built in the example. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Write queries applying the following scenarios:
    http://sqlfiddle.com/#!9/ad9170
    Find a guest who exists in the database and has not booked a room.
        SELECT 
            guests.id,
            guests.first_name, 
            guests.last_name, 
            guests.email, 
            guests.phone_number,  
            bookings.check_in_date, 
            bookings.check_out_date
        FROM guests
        LEFT OUTER JOIN bookings ON bookings.guests_id = guests.id
        HAVING bookings.check_in_date IS NULL
    Find bookings for a guest who has booked two rooms for the same dates.
        SELECT 
            guests.id,
            guests.first_name, 
            guests.last_name, 
            guests.email, 
            guests.phone_number,  
            bookings.check_in_date, 
            COUNT(check_in_date) as timesCheckedIn
        FROM guests
        JOIN bookings ON bookings.guests_id = guests.id
        GROUP BY first_name, CHECK_IN_DATE, guests.id
        HAVING COUNT(check_in_date)>1
    Find bookings for a guest who has booked one room several times on different dates.
        SELECT 
            guests.id,
            guests.first_name, 
            guests.last_name, 
            guests.email, 
            guests.phone_number,  
            bookings.room_id,
        COUNT(room_id) as timesBooked
        FROM guests
        JOIN bookings ON bookings.guests_id = guests.id
        GROUP BY first_name, guests.id, bookings.room_id
        HAVING COUNT(room_id)>1
    Count the number of unique guests who have booked the same room.
        SELECT   
            bookings.room_id,
            COUNT(bookings.guests_id) as guestBookedRoom
        FROM guests
        JOIN bookings ON bookings.guests_id = guests.id
        GROUP BY bookings.room_id
        HAVING COUNT(room_id)>1


2. Design a data model for students and the classes they have taken. The model should include the students' grades for a given class.
    Work through the questions from the example above.
    Document any assumptions you make about what data should be stored, what data types should be used, etc., and include them in a text file.
    Ask questions of your mentor in your next session if you are unsure about parts of your model.
    Draw the model using the notation used in the checkpoint and submit a picture. You can also use a tool like StarUML or quickdatabasediagrams.com if you choose.
        https://app.quickdatabasediagrams.com/#/schema/DKYegmbM0k6K6S_5ox4yHg

3. Build a database for the students/classes data model. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Write queries for the following data:
    http://sqlfiddle.com/#!9/63541e
    All students who have taken a particular class.
        SELECT students.studentID, students.firstName, students.lastName, students.email, classes.class, classes.semester, grades.grade
        FROM students
        JOIN grades ON students.studentID = grades.studentID
        JOIN classes ON classes.classID = grades.classID
        WHERE class='math'

        SELECT COUNT(grades.studentID) AS students, classes.class
        FROM students
        JOIN grades ON students.studentID = grades.studentID
        JOIN classes ON classes.classID = grades.classID
        WHERE grades.classID=002
    The number of each grade (using letter grades A-F) earned in a particular class.
        SELECT classes.class, grades.grade
        FROM classes
        JOIN grades ON grades.classID = classes.classID
        WHERE class='math'
    Class names and the total number of students who have taken each class in the list.
        SELECT class, COUNT(grades.classID) as totalStudents
        FROM classes
        JOIN grades ON grades.classID = classes.classID
        GROUP BY class
    The class taken by the largest number of students.
        SELECT class, COUNT(grades.classID) as totalStudents
        FROM classes
        JOIN grades ON grades.classID = classes.classID
        GROUP BY class
        HAVING MAX(totalStudents);





