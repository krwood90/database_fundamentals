1. In your own words, explain the benefits of normalization. Include a real-world scenario where normalization is necessary.
    By doing data normalization it decreases the redundancy of information within the tables and allows for less usage of space.
    Another factor in using data normalization is the ability to have to use fewer specifics when searching for the values within the 
    multiple tables. Also when joining multiple taels it will make them more efficient and faster.
    An example of this situation is for schools who have thousands of students taken multiple classes throughout the years, and using 
    duplicate info like first and last name, email, phone-number, and whatnot would slow down the system instead they give a student an ID
    to use for the years and just have to reference that number instead.


2. List and explain the different normal forms and how they relate to one another, with regard to your real-world scenario in the first question.
    1NF     - Having multiple values within the same row and columnin the table, this would be like having a student having multiple classes taken in the 
            same row and column window, then change it to have seperate rows for the different classes with the same student.
    2NF     - Must be 1NF and all the non-key attributes cannot be dependent on a secondary value of the primary key, meaning no foreign keys values can be 
            inside of a primary key value table.
    3NF     - Must be 2NF and all transitive dependencies of the non- prime attributes can exist within the same table.
    BCNF    - Must be 3NF and for every dependency of X -> Y, X must be the super key of that.


3. This student_records table contains students and their grades in different subjects. The schema is already in first normal form (1NF). Convert this schema to the third normal form (3NF) using the techniques you learned in this checkpoint.
    http://sqlfiddle.com/#!17/cdf64f/
    CREATE TABLE student_records (
        "id"       INTEGER,
        "student_id"     INTEGER,
        "student_email"  VARCHAR(24),
        "student_name"   VARCHAR(9),
        "professor_id"   INTEGER
        );

    CREATE TABLE professors (
        "professor_id"   INTEGER,
        "professor_name" VARCHAR(9),
        "subject"        VARCHAR(11)
        );

    CREATE TABLE classes (
        "id" INTEGER,
        "student_id"     INTEGER,
        "subject"        VARCHAR(11),
        "grade"          VARCHAR(1)
        );
    
    INSERT INTO student_records
        ("id", "student_id", "student_email",            "student_name", "professor_id")
    VALUES                                                                                                                                                 
        ( 1,    1,           'john.b20@hogwarts.edu',    'John B',    2),
        ( 2,    2,           'sarah.s20@hogwarts.edu',   'Sarah S',   2),
        ( 3,    3,           'martha.l20@hogwarts.edu',  'Martha L',  1),
        ( 4,    4,           'james.g20@hogwarts.edu',   'James G',   3),
        ( 5,    5,           'stanley.p20@hogwarts.edu', 'Stanley P', 1);
    
    INSERT INTO professors
        ("professor_id", "professor_name", "subject")
    VALUES
        (1,             'Natalie M', 'Economics'),
        (2,             'William C', 'Philosophy'),
        (3,             'Mark W',    'Mathematics');

    INSERT INTO classes
        ("id", "student_id", "subject",     "grade")
    VALUES
        (1, 1, 'Philosophy',  'A'),
        (2, 2, 'Philosophy',  'C'),
        (3, 3, 'Economics',   'A'),
        (4, 4, 'Mathematics', 'B'),
        (5, 5, 'Economics',   'B');


4. In your own words, explain the potential disadvantages of normalizing the data above. What are its trade-offs? Submit your findings in the submission table and discuss them with your mentor in your next session.
    A major disadvantage of doing normalizing is having to use multiple tables and possibly too many tables along with having to join several tables just to get
    to a certain value and become very messy really fast. The real trade-off for this sort of normalization is the amount of columns in a given table compared to have 
    multipe tables with only a few columns. Which depending on the amount of information can make it faster or slower if having to join so many more tables instead of just a few
    extra columns.

5. Looking at the tables you have normalized. If you need to denormalize to improve query performance or speed up reporting, how would you carry out denormalization for this database design? Submit potential strategies in the submission tab and discuss them with your mentor in your next session.
    What i would to denormalize these tables would to get rid of the classes tables and join them back with the students table and just the grades
    that they had gotten with the professors id to reference the professors and the class they teach. That is because the grades with the classes 
    already have to be seperate from each other and there will be the same amount of grades as there will be student ids.


6. Explore the trade-offs between data normalization and denormalization in this scenario, submit your findings in the submission tab, and discuss them with your mentor in your next session.
    In this scenario the trade off between the normalization and denormalization would be either a new table for the grades or the additional column of grades
    within the student_records table which would be the one column in that table or additional 4 within the new classes table. It would make the speed faster
    due to less information that would be need to be tracked ad sorted within the table.

